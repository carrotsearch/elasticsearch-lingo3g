// This plugin's version (typically matches that of ES).
plugins {
  id 'java-library'
  id 'distribution'

  id "com.palantir.consistent-versions" version '1.26.1'
  id 'com.diffplug.gradle.spotless' version "4.5.1" apply false
}

apply from: file('gradle/validation/spotless.gradle')

version = '7.7.1'
group = 'com.carrotsearch'
description = "Search results clustering plugin for Elasticsearch (Lingo3G)"

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  bundled
  implementation.extendsFrom(bundled)

  lingo3g
  compileOnly.extendsFrom(lingo3g)
}

dependencies {
  lingo3g("com.carrotsearch.lingo3g:lingo3g", {
    exclude group: "org.carrot2", module: "core"
  })

  compileOnly "org.carrot2:carrot2-core"

  compileOnly("org.apache.logging.log4j:log4j-core")

  compileOnly("org.elasticsearch:elasticsearch", {
    exclude group: "*"
  })
  compileOnly("org.elasticsearch:elasticsearch-x-content", {
    exclude group: "*"
  })

  bundled("org.apache.logging.log4j:log4j-slf4j18-impl", {
    exclude group: "org.apache.logging.log4j", module: "log4j-core"
    exclude group: "org.apache.logging.log4j", module: "log4j-api"
    exclude group: "org.slf4j"
  })
}

distributions { DistributionContainer container ->
  main {
    contents {
      // And anything Lingo3G depends on but not Lingo3G itself.
      from((configurations.lingo3g - configurations.runtimeClasspath), {
        exclude "**/lingo3g*"
      })
    }
  }

  full {
    contents {
      // Include full Lingo3G, including binaries.
      from((configurations.lingo3g - configurations.runtimeClasspath), {
      })
    }
  }

  // Configure common aspects.
  configure([main, full]) {
    contents {
      from("src/main/assembly", {
        filesMatching("**/plugin-descriptor.properties", {
          filteringCharset = 'UTF-8'
          expand([
              'versions': [
                  'es': { -> getVersion('org.elasticsearch:elasticsearch') }
              ]
          ])
        })
      })

      from("src/config", {
        into 'config/'
      })

      // Include plugin classes and bundled JARs.
      from jar.outputs
      from(configurations.bundled)

      into '/'
    }
  }
}


configure(rootProject) {
  apply plugin: 'maven-publish'
  apply plugin: 'signing'

  ext {
    mavenBuildRepo = file("${buildDir}/maven")
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  publishing {
    repositories {
      maven {
        name = 'build'
        url = mavenBuildRepo
      }

      maven {
        name = 'sonatype'
        url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        credentials {
          if (project.hasProperty('nexusUsername')) {
            username project.nexusUsername
          }
          if (project.hasProperty('nexusPassword')) {
            password project.nexusPassword
          }
        }
      }
    }

    publications {
      maven(MavenPublication) {
        from components.java
        group = project.group
        artifactId = project.archivesBaseName

        artifact distZip

        pom {
          name = project.name
          description = project.description
          artifactId 'elasticsearch-lingo3g'

          url = 'https://github.com/carrotsearch/elasticsearch-lingo3g'
          inceptionYear = "2020"

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          organization {
            name = "Carrot Search s.c."
            url = "https://www.carrotsearch.com"
          }

          developers {
            developer {
              id = 'stanislaw.osinski'
              name = 'Stanisław Osiński'
              email = 'stanislaw.osinski@carrotsearch.com'
            }
            developer {
              id = 'dawid.weiss'
              name = 'Dawid Weiss'
              email = 'dawid.weiss@carrotsearch.com'
            }
          }

          scm {
            connection = 'scm:git:https://github.com/carrotsearch/elasticsearch-lingo3g'
            developerConnection = 'scm:git:git@github.com:carrotsearch/elasticsearch-lingo3g.git'
            url = 'https://github.com/carrotsearch/elasticsearch-lingo3g'
          }
        }
      }
    }
  }

  signing {
    sign publishing.publications.maven
  }

  task publishToSonatype() {
    dependsOn publishMavenPublicationToSonatypeRepository
  }

  tasks.matching { it.path == ":publishMavenPublicationToBuildRepository" }.all {
    doFirst {
      delete mavenBuildRepo
    }
  }

  task publishToLocal() {
    group "Publishing"
    description "Publish Maven artifacts locally to " + file(mavenBuildRepo)

    dependsOn ":publishMavenPublicationToBuildRepository"
  }

  task sonatypeBundle(type: Zip) {
    group "Publishing"
    description "Prepare a sonatype bundle archive with all artifacts."

    dependsOn publishToLocal

    archiveFileName = "bundle-${project.archivesBaseName}-${project.version}.zip"
    destinationDirectory = file("${buildDir}/sonatype")

    from(file("${mavenBuildRepo}/com/carrotsearch/elasticsearch-lingo3g/${project.version}/"), {
    })
  }
}
